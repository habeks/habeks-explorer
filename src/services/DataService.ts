import { HexTile } from '../types/hex';
import { Location } from '../types';

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
 */
interface UserData {
  id: string;
  nickname: string;
  email: string;
  balance: {
    tokens: number;
    shards: number;
    orbs: number;
  };
  ownedHexes: string[];
  level: number;
  experience: number;
  achievements: string[];
  lastLogin: string;
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö hex-—Ç–∞–π–ª–æ–≤
 */
interface RegionData {
  region: string;
  center: {
    latitude: number;
    longitude: number;
  };
  lastUpdated: string;
  tiles: HexTile[];
}

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –ê–±—Å—Ç—Ä–∞–≥–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–¥–∏–Ω—ã–π API
 */
class DataService {
  private static instance: DataService;
  private hexCache: Map<string, RegionData> = new Map();
  private userCache: UserData | null = null;
  private readonly baseUrl = '/data';

  private constructor() {}

  /**
   * Singleton pattern –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –µ–¥–∏–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞
   */
  public static getInstance(): DataService {
    if (!DataService.instance) {
      DataService.instance = new DataService();
    }
    return DataService.instance;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–≥–∏–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
   */
  private getRegionByCoordinates(latitude: number, longitude: number): string {
    // –ú–æ—Å–∫–≤–∞: —à–∏—Ä–æ—Ç–∞ ~55.7, –¥–æ–ª–≥–æ—Ç–∞ ~37.6
    if (latitude >= 55.0 && latitude <= 56.5 && longitude >= 36.0 && longitude <= 39.0) {
      return 'moscow';
    }
    
    // –õ–æ–Ω–¥–æ–Ω: —à–∏—Ä–æ—Ç–∞ ~51.5, –¥–æ–ª–≥–æ—Ç–∞ ~-0.1
    if (latitude >= 51.0 && latitude <= 52.0 && longitude >= -1.0 && longitude <= 1.0) {
      return 'london';
    }
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ú–æ—Å–∫–≤—É
    return 'moscow';
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç hex-—Ç–∞–π–ª—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö JSON –¥–∞–Ω–Ω—ã—Ö
   */
  public async loadHexTiles(location: Location): Promise<HexTile[]> {
    const region = this.getRegionByCoordinates(location.latitude, location.longitude);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (this.hexCache.has(region)) {
      const cachedData = this.hexCache.get(region)!;
      console.log(`‚úÖ Hex-—Ç–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫—ç—à–∞ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞: ${region}`);
      return cachedData.tiles;
    }

    try {
      console.log(`üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ hex-—Ç–∞–π–ª–æ–≤ –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...`);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º hex-—Ç–∞–π–ª—ã –∏–∑ –Ω–æ–≤–æ–≥–æ JSON —Ñ–∞–π–ª–∞
      const response = await fetch(`${this.baseUrl}/hex-tiles.json`);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      if (!data.tiles || !Array.isArray(data.tiles)) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö hex-—Ç–∞–π–ª–æ–≤');
      }
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç RegionData
      const regionData: RegionData = {
        region: region,
        center: {
          latitude: location.latitude,
          longitude: location.longitude
        },
        lastUpdated: data.metadata?.lastSynced || new Date().toISOString(),
        tiles: data.tiles.map((tile: any) => ({
          h3Index: tile.h3Index,
          coordinates: tile.coordinates as [number, number],
          ownershipStatus: tile.ownershipStatus,
          price: tile.price,
          owner: tile.owner,
          resources: tile.resources,
          lastUpdated: new Date(tile.lastUpdated).getTime()
        }))
      };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      this.hexCache.set(region, regionData);
      
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${regionData.tiles.length} hex-—Ç–∞–π–ª–æ–≤ –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö`);
      
      return regionData.tiles;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ hex-—Ç–∞–π–ª–æ–≤:', error);
      
      // Fallback: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      const fallbackTiles = this.generateFallbackHexTiles(location);
      console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback hex-—Ç–∞–π–ª—ã');
      return fallbackTiles;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ JSON —Ñ–∞–π–ª–∞
   */
  public async loadUserData(): Promise<UserData | null> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (this.userCache) {
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫—ç—à–∞');
      return this.userCache;
    }

    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
      
      const response = await fetch(`${this.baseUrl}/demo-player.json`);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç UserData
      const userData: UserData = {
        id: data.player.id,
        nickname: data.player.nickname,
        email: data.player.email,
        balance: {
          tokens: data.currency.tokens,
          shards: data.currency.shards,
          orbs: data.currency.orbs
        },
        ownedHexes: data.ownedHexes || [],
        level: data.player.level,
        experience: data.player.experience,
        achievements: data.achievements?.map((a: any) => a.id) || [],
        lastLogin: data.player.lastActive
      };
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      if (!userData.id || !userData.nickname) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö');
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      this.userCache = userData;
      
      console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userData.nickname} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö`);
      
      return userData;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–≥–∏–æ–Ω–µ
   */
  public async getRegionInfo(location: Location): Promise<{ region: string; center: { latitude: number; longitude: number } } | null> {
    const region = this.getRegionByCoordinates(location.latitude, location.longitude);
    
    try {
      const response = await fetch(`${this.baseUrl}/hex-tiles-${region}.json`);
      
      if (!response.ok) {
        return null;
      }
      
      const data: RegionData = await response.json();
      
      return {
        region: data.region,
        center: data.center
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–≥–∏–æ–Ω–µ:', error);
      return null;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤–ª–∞–¥–µ–Ω–∏—è hex-—Ç–∞–π–ª–æ–º (–∏–º–∏—Ç–∞—Ü–∏—è API)
   */
  public async updateHexOwnership(hexId: string, newOwner: string | null, region?: string): Promise<boolean> {
    try {
      console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–Ω–∏—è hex-—Ç–∞–π–ª–æ–º ${hexId}...`);
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      await new Promise(resolve => setTimeout(resolve, 300));
      
      // –ò—â–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à–µ
      for (const [cachedRegion, data] of this.hexCache.entries()) {
        const hexIndex = data.tiles.findIndex(tile => tile.h3Index === hexId);
        if (hexIndex !== -1) {
          data.tiles[hexIndex].owner = newOwner;
          data.tiles[hexIndex].ownershipStatus = newOwner ? 'owned' : 'free';
          data.tiles[hexIndex].lastUpdated = Date.now();
          data.lastUpdated = new Date().toISOString();
          
          console.log(`‚úÖ –í–ª–∞–¥–µ–Ω–∏–µ hex-—Ç–∞–π–ª–æ–º ${hexId} –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
          return true;
        }
      }
      
      console.warn(`‚ö†Ô∏è Hex-—Ç–∞–π–ª ${hexId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ`);
      return false;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–ª–∞–¥–µ–Ω–∏—è hex-—Ç–∞–π–ª–æ–º:', error);
      return false;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–º–∏—Ç–∞—Ü–∏—è API)
   */
  public async updateUserBalance(balanceChanges: Partial<UserData['balance']>): Promise<boolean> {
    try {
      if (!this.userCache) {
        throw new Error('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
      }
      
      console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      await new Promise(resolve => setTimeout(resolve, 200));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
      this.userCache.balance = {
        ...this.userCache.balance,
        ...balanceChanges
      };
      
      console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
      return false;
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à
   */
  public clearCache(): void {
    this.hexCache.clear();
    this.userCache = null;
    console.log('üóëÔ∏è –í–µ—Å—å –∫—ç—à –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω');
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –∫—ç—à hex-—Ç–∞–π–ª–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
   */
  public clearRegionCache(region: string): void {
    this.hexCache.delete(region);
    console.log(`üóëÔ∏è –ö—ç—à hex-—Ç–∞–π–ª–æ–≤ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ ${region} –æ—á–∏—â–µ–Ω`);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
   */
  public getCacheStats(): { regions: { [region: string]: number }, userLoaded: boolean } {
    const regions: { [region: string]: number } = {};
    
    this.hexCache.forEach((data, region) => {
      regions[region] = data.tiles.length;
    });
    
    return {
      regions,
      userLoaded: this.userCache !== null
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç fallback hex-—Ç–∞–π–ª—ã –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
   */
  private generateFallbackHexTiles(location: Location): HexTile[] {
    const tiles: HexTile[] = [];
    const count = 5;
    
    for (let i = 0; i < count; i++) {
      const offsetLat = (Math.random() - 0.5) * 0.01; // ¬±0.005 –≥—Ä–∞–¥—É—Å–∞
      const offsetLng = (Math.random() - 0.5) * 0.01;
      
      tiles.push({
        h3Index: `fallback_${Date.now()}_${i}`,
        coordinates: {
          lat: location.latitude + offsetLat,
          lng: location.longitude + offsetLng
        },
        ownershipStatus: i % 3 === 0 ? 'owned' : i % 3 === 1 ? 'free' : 'enemy',
        price: 1000 + Math.floor(Math.random() * 1000),
        owner: i % 3 === 0 ? 'demo_player_123' : i % 3 === 2 ? 'rival_corp' : null,
        resources: {
          oil: Math.floor(Math.random() * 50),
          gas: Math.floor(Math.random() * 30),
          gold: Math.floor(Math.random() * 10),
          stone: Math.floor(Math.random() * 100)
        },
        lastUpdated: Date.now()
      });
    }
    
    return tiles;
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–≥—Ä–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
   */
  public async loadGameConfig(): Promise<any> {
    try {
      const response = await fetch(`${this.baseUrl}/game-config.json`);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const config = await response.json();
      console.log('‚úÖ –ò–≥—Ä–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
      return config;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
      return null;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç AR –ø—Ä–µ–¥–º–µ—Ç—ã
   */
  public async loadARItems(): Promise<any[]> {
    try {
      const response = await fetch(`${this.baseUrl}/ar-items.json`);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.items?.length || 0} AR –ø—Ä–µ–¥–º–µ—Ç–æ–≤`);
      return data.items || [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ AR –ø—Ä–µ–¥–º–µ—Ç–æ–≤:', error);
      return [];
    }
  }

  /**
   * –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  public async preloadData(location: Location): Promise<void> {
    try {
      console.log('üöÄ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const [hexTiles, userData, gameConfig, arItems] = await Promise.all([
        this.loadHexTiles(location),
        this.loadUserData(),
        this.loadGameConfig(),
        this.loadARItems()
      ]);
      
      console.log('‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
export const dataService = DataService.getInstance();
export type { UserData, RegionData };
export default DataService;