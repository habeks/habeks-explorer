import { useState, useEffect, useCallback } from 'react';
import { HexTile } from '../types/hex';
import { Location } from '../types';
import { dataService } from '../services/DataService';

/**
 * –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è hex-—Ç–∞–π–ª–∞–º–∏ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ DataService
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */
export const useHexTiles = (location: Location | null) => {
  const [hexTiles, setHexTiles] = useState<HexTile[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [lastLoadedLocation, setLastLoadedLocation] = useState<Location | null>(null);

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ hex-—Ç–∞–π–ª–æ–≤
  const loadHexTiles = useCallback(async (targetLocation: Location) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
    if (lastLoadedLocation && 
        Math.abs(lastLoadedLocation.latitude - targetLocation.latitude) < 0.01 &&
        Math.abs(lastLoadedLocation.longitude - targetLocation.longitude) < 0.01) {
      console.log('üìç –î–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏');
      return hexTiles;
    }

    setIsLoading(true);
    setError(null);
    
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ hex-—Ç–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ useHexTiles...');
      
      const tiles = await dataService.loadHexTiles(targetLocation);
      
      setHexTiles(tiles);
      setLastLoadedLocation(targetLocation);
      
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${tiles.length} hex-—Ç–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ useHexTiles`);
      return tiles;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ hex-—Ç–∞–π–ª–æ–≤:', err);
      setError(errorMessage);
      setHexTiles([]);
      return [];
    } finally {
      setIsLoading(false);
    }
  }, [lastLoadedLocation, hexTiles]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ª–æ–∫–∞—Ü–∏–∏
  useEffect(() => {
    if (location) {
      loadHexTiles(location);
    }
  }, [location, loadHexTiles]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–ª–∞–¥–µ–Ω–∏—è hex-—Ç–∞–π–ª–æ–º
  const updateHexOwnership = useCallback(async (hexId: string, newOwner: string | null) => {
    try {
      console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–Ω–∏—è hex-—Ç–∞–π–ª–æ–º ${hexId}...`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤ DataService
      const success = await dataService.updateHexOwnership(hexId, newOwner);
      
      if (success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setHexTiles(prevTiles => 
          prevTiles.map(tile => {
            if (tile.h3Index === hexId) {
              return {
                ...tile,
                owner: newOwner,
                ownershipStatus: newOwner ? 'owned' : 'free',
                lastUpdated: Date.now()
              };
            }
            return tile;
          })
        );
        
        console.log(`‚úÖ –í–ª–∞–¥–µ–Ω–∏–µ hex-—Ç–∞–π–ª–æ–º ${hexId} –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
        return true;
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤–ª–∞–¥–µ–Ω–∏–µ –≤ DataService');
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–Ω–∏—è';
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–Ω–∏—è hex-—Ç–∞–π–ª–æ–º:', err);
      setError(errorMessage);
      return false;
    }
  }, []);

  // –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–Ω–∏—è
  const updateMultipleHexOwnership = useCallback(async (hexIds: string[], newOwner: string | null) => {
    try {
      console.log(`üîÑ –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–Ω–∏—è ${hexIds.length} hex-—Ç–∞–π–ª–æ–≤...`);
      
      const promises = hexIds.map(hexId => dataService.updateHexOwnership(hexId, newOwner));
      const results = await Promise.all(promises);
      
      const successCount = results.filter(Boolean).length;
      
      if (successCount > 0) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ç–∞–π–ª–æ–≤
        const successfulHexIds = hexIds.filter((_, index) => results[index]);
        
        setHexTiles(prevTiles => 
          prevTiles.map(tile => {
            if (successfulHexIds.includes(tile.h3Index)) {
              return {
                ...tile,
                owner: newOwner,
                ownershipStatus: newOwner ? 'owned' : 'free',
                lastUpdated: Date.now()
              };
            }
            return tile;
          })
        );
        
        console.log(`‚úÖ –í–ª–∞–¥–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è ${successCount} –∏–∑ ${hexIds.length} hex-—Ç–∞–π–ª–æ–≤`);
      }
      
      return successCount;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–Ω–∏—è';
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–Ω–∏—è:', err);
      setError(errorMessage);
      return 0;
    }
  }, []);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ hex-—Ç–∞–π–ª–∞ –ø–æ ID
  const getHexById = useCallback((hexId: string): HexTile | undefined => {
    return hexTiles.find(tile => tile.h3Index === hexId);
  }, [hexTiles]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ hex-—Ç–∞–π–ª–∞–º
  const getHexStats = useCallback(() => {
    const owned = hexTiles.filter(h => h.ownershipStatus === 'owned').length;
    const free = hexTiles.filter(h => h.ownershipStatus === 'free').length;
    const enemy = hexTiles.filter(h => h.ownershipStatus === 'enemy').length;
    const total = hexTiles.length;
    
    return { owned, free, enemy, total };
  }, [hexTiles]);

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  const refresh = useCallback(() => {
    if (lastLoadedLocation) {
      setLastLoadedLocation(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à
      loadHexTiles(lastLoadedLocation);
    }
  }, [lastLoadedLocation, loadHexTiles]);

  // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏
  const clearError = useCallback(() => {
    setError(null);
  }, []);

  return {
    hexTiles,
    isLoading,
    error,
    loadHexTiles,
    updateHexOwnership,
    updateMultipleHexOwnership,
    getHexById,
    getHexStats,
    refresh,
    clearError
  };
};

export default useHexTiles;