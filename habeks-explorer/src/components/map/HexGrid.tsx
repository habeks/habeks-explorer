import React, { useEffect, useState, useRef } from 'react';
import { latLngToCell, cellToBoundary, gridDistance, cellToLatLng, gridDisk } from 'h3-js';
import maplibregl from 'maplibre-gl';
import { HexTile, HexOwnershipStatus } from '../../types';
import { dataService } from '../../services/DataService';

interface HexGridProps {
  map: maplibregl.Map;
  center: { lat: number; lng: number };
  resolution?: number;
  onHexClick?: (hexId: string, hexData: HexTile) => void;
  selectedHexes?: Set<string>;
}

export const HexGrid: React.FC<HexGridProps> = ({
  map,
  center,
  resolution = 9, // H3 resolution (0-15), 9 –ø—Ä–∏–º–µ—Ä–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–º–µ—Ä—É –∫–≤–∞—Ä—Ç–∞–ª–∞
  onHexClick,
  selectedHexes = new Set()
}) => {
  const [currentResolution, setCurrentResolution] = useState(resolution);
  const [hexTiles, setHexTiles] = useState<HexTile[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [loadError, setLoadError] = useState<string | null>(null);
  const sourceId = 'hex-grid-source';
  const layerId = 'hex-grid-layer';
  const [isInitialized, setIsInitialized] = useState(false);

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑—É–º–∞ –∫–∞—Ä—Ç—ã
  const getResolutionFromZoom = (zoom: number): number => {
    if (zoom >= 16) return 10; // –û—á–µ–Ω—å –±–ª–∏–∑–∫–æ - –º–µ–ª–∫–∏–µ –≥–µ–∫—Å—ã
    if (zoom >= 14) return 9;  // –ë–ª–∏–∑–∫–æ - —Å—Ä–µ–¥–Ω–∏–µ –≥–µ–∫—Å—ã
    if (zoom >= 12) return 8;  // –°—Ä–µ–¥–Ω–∏–π –∑—É–º - –∫—Ä—É–ø–Ω—ã–µ –≥–µ–∫—Å—ã
    if (zoom >= 10) return 7;  // –î–∞–ª–µ–∫–æ - –æ—á–µ–Ω—å –∫—Ä—É–ø–Ω—ã–µ –≥–µ–∫—Å—ã
    return 6; // –û—á–µ–Ω—å –¥–∞–ª–µ–∫–æ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä—É–ø–Ω—ã–µ –≥–µ–∫—Å—ã
  };

  // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ hex-—Ç–∞–π–ª–æ–≤
  const loadHexData = async () => {
    if (isLoading) return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    
    setIsLoading(true);
    setLoadError(null);
    
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ hex-—Ç–∞–π–ª–æ–≤...');
      
      const tiles = await dataService.loadHexTiles({
        latitude: center.lat,
        longitude: center.lng,
        accuracy: 1000,
        timestamp: Date.now()
      });
      
      setHexTiles(tiles);
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${tiles.length} hex-—Ç–∞–π–ª–æ–≤`);
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ hex-—Ç–∞–π–ª–æ–≤:', error);
      setLoadError(errorMessage);
      setHexTiles([]); // –û—á–∏—â–∞–µ–º —Ç–∞–π–ª—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
    } finally {
      setIsLoading(false);
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –≥–µ–∫—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–ª–∞–¥–µ–Ω–∏—è
  const getHexColor = (status: HexOwnershipStatus, isSelected: boolean = false): string => {
    if (isSelected) {
      return '#ffd700'; // –ó–æ–ª–æ—Ç–æ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
    }
    
    switch (status) {
      case 'owned':
        return '#00ff88'; // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —Å–≤–æ–∏—Ö
      case 'enemy':
        return '#ff3366'; // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è —á—É–∂–∏—Ö
      case 'free':
      default:
        return '#666666'; // –°–µ—Ä—ã–π –¥–ª—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö
    }
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–µ–∫—Å–∞–≥–æ–Ω–∞–ª—å–Ω–æ–π —Å–µ—Ç–∫–∏ –≤–æ–∫—Ä—É–≥ —Ü–µ–Ω—Ç—Ä–∞
  const generateHexGrid = (centerLat: number, centerLng: number, res: number, radius: number = 3): maplibregl.GeoJSONSourceSpecification['data'] => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º H3 –∏–Ω–¥–µ–∫—Å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —è—á–µ–π–∫–∏
      const centerHex = latLngToCell(centerLat, centerLng, res);
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–µ–∫—Å—ã –≤ —Ä–∞–¥–∏—É—Å–µ
      const hexIds = gridDisk(centerHex, radius);
      
      const features: any[] = [];
      
      hexIds.forEach(hexId => {
        try {
          // –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –≥–µ–∫—Å–∞
          const boundary = cellToBoundary(hexId, true); // true –¥–ª—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
          
          // –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –≥–µ–∫—Å–∞ –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö hexTiles
          const hexData = hexTiles.find(tile => tile.h3Index === hexId);
          const ownershipStatus = hexData?.ownershipStatus || 'free';
          const isSelected = selectedHexes.has(hexId);
          
          // –°–æ–∑–¥–∞–µ–º GeoJSON feature –¥–ª—è –≥–µ–∫—Å–∞
          const feature = {
            type: 'Feature' as const,
            properties: {
              hexId: hexId,
              ownershipStatus: ownershipStatus,
              isSelected: isSelected,
              price: hexData?.price || 100,
              owner: hexData?.owner || null
            },
            geometry: {
              type: 'Polygon' as const,
              coordinates: [boundary.map(([lat, lng]) => [lng, lat])] // MapLibre –æ–∂–∏–¥–∞–µ—Ç [lng, lat]
            }
          };
          
          features.push(feature);
        } catch (error) {
          console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–µ–∫—Å–∞ ${hexId}:`, error);
        }
      });
      
      return {
        type: 'FeatureCollection' as const,
        features: features
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–µ–∫—Å–∞–≥–æ–Ω–∞–ª—å–Ω–æ–π —Å–µ—Ç–∫–∏:', error);
      return {
        type: 'FeatureCollection' as const,
        features: []
      };
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—Ç—Ä–∞ –∫–∞—Ä—Ç—ã - —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π —á—Ç–æ–±—ã —Å–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ç–∫—É
  useEffect(() => {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç—É—é —Å–µ—Ç–∫—É, –∑–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–ª–∞–¥–µ–Ω–∏–∏
    const timer = setTimeout(() => {
      loadHexData();
    }, 500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    
    return () => clearTimeout(timer);
  }, [center.lat, center.lng]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–ª–æ—è
  useEffect(() => {
    if (!map || !map.isStyleLoaded() || isLoading) return;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
      if (map.getSource(sourceId)) {
        if (map.getLayer(layerId)) {
          map.removeLayer(layerId);
        }
        if (map.getLayer(`${layerId}-stroke`)) {
          map.removeLayer(`${layerId}-stroke`);
        }
        map.removeSource(sourceId);
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≥–µ–∫—Å–∞–≥–æ–Ω–∞–ª—å–Ω–æ–π —Å–µ—Ç–∫–∏
      const hexGridData = generateHexGrid(center.lat, center.lng, currentResolution);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ—Ç–∫—É –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–ª–∞–¥–µ–Ω–∏–∏
      if (typeof hexGridData === 'object' && 'features' in hexGridData && hexGridData.features.length === 0) {
        console.log('‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å–µ—Ç–∫–∏ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –æ –≤–ª–∞–¥–µ–Ω–∏–∏');
        // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å–µ—Ç–∫—É
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
      map.addSource(sourceId, {
        type: 'geojson',
        data: hexGridData
      });

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –¥–ª—è –∑–∞–ª–∏–≤–∫–∏ –≥–µ–∫—Å–æ–≤
      map.addLayer({
        id: layerId,
        type: 'fill',
        source: sourceId,
        paint: {
          'fill-color': [
            'case',
            ['get', 'isSelected'], '#ffd700',
            ['==', ['get', 'ownershipStatus'], 'owned'], '#00ff88',
            ['==', ['get', 'ownershipStatus'], 'enemy'], '#ff3366',
            '#666666'
          ],
          'fill-opacity': 0.3,
          'fill-outline-color': [
            'case',
            ['get', 'isSelected'], '#ffd700',
            ['==', ['get', 'ownershipStatus'], 'owned'], '#00ff88',
            ['==', ['get', 'ownershipStatus'], 'enemy'], '#ff3366',
            '#888888'
          ]
        }
      });

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –¥–ª—è –≥—Ä–∞–Ω–∏—Ü –≥–µ–∫—Å–æ–≤
      map.addLayer({
        id: `${layerId}-stroke`,
        type: 'line',
        source: sourceId,
        paint: {
          'line-color': [
            'case',
            ['get', 'isSelected'], '#ffd700',
            ['==', ['get', 'ownershipStatus'], 'owned'], '#00ff88',
            ['==', ['get', 'ownershipStatus'], 'enemy'], '#ff3366',
            '#888888'
          ],
          'line-width': [
            'case',
            ['get', 'isSelected'], 3,
            2
          ],
          'line-opacity': 0.8
        }
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤
      if (onHexClick) {
        map.on('click', layerId, (e) => {
          if (e.features && e.features[0]) {
            const feature = e.features[0];
            const hexId = feature.properties?.hexId;
            if (hexId) {
              const [lat, lng] = cellToLatLng(hexId);
              const hexData: HexTile = {
                h3Index: hexId,
                coordinates: { lat, lng },
                ownershipStatus: feature.properties?.ownershipStatus || 'free',
                price: feature.properties?.price || 100,
                owner: feature.properties?.owner || null,
                lastUpdated: Date.now()
              };
              onHexClick(hexId, hexData);
            }
          }
        });
      }

      // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
      map.on('mouseenter', layerId, () => {
        map.getCanvas().style.cursor = 'pointer';
      });

      map.on('mouseleave', layerId, () => {
        map.getCanvas().style.cursor = '';
      });

      setIsInitialized(true);
      console.log('‚úÖ HexGrid —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ HexGrid:', error);
    }
  }, [map, center, currentResolution, hexTiles, selectedHexes, onHexClick]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥–µ–∫—Å–æ–≤
  useEffect(() => {
    if (!map || !isInitialized || !map.getSource(sourceId) || isLoading) return;

    try {
      const hexGridData = generateHexGrid(center.lat, center.lng, currentResolution);
      (map.getSource(sourceId) as maplibregl.GeoJSONSource).setData(hexGridData);
      console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥–µ–∫—Å—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥–µ–∫—Å–æ–≤:', error);
    }
  }, [selectedHexes]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑—É–º–∞
  useEffect(() => {
    if (!map) return;
    
    const handleZoom = () => {
      const zoom = map.getZoom();
      const newResolution = getResolutionFromZoom(zoom);
      if (newResolution !== currentResolution) {
        setCurrentResolution(newResolution);
      }
    };

    map.on('zoom', handleZoom);
    
    return () => {
      if (map) {
        map.off('zoom', handleZoom);
      }
    };
  }, [map, currentResolution, getResolutionFromZoom]);

  // Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (map && map.getStyle) {
        try {
          if (map.getLayer?.(layerId)) {
            map.removeLayer(layerId);
          }
          if (map.getLayer?.(`${layerId}-stroke`)) {
            map.removeLayer(`${layerId}-stroke`);
          }
          if (map.getSource?.(sourceId)) {
            map.removeSource(sourceId);
          }
        } catch (error) {
          console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ HexGrid:', error);
        }
      }
    };
  }, []);

  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  useEffect(() => {
    if (isLoading) {
      console.log('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ hex-—Ç–∞–π–ª–æ–≤...');
    } else if (loadError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', loadError);
    } else if (hexTiles.length > 0) {
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${hexTiles.length} hex-—Ç–∞–π–ª–æ–≤`);
    }
  }, [isLoading, loadError, hexTiles.length]);

  return null; // –≠—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
};

export default HexGrid;