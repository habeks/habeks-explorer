import React, { useEffect, useState, useRef } from 'react';
import maplibregl from 'maplibre-gl';
import { Player, Currency, Location, HexTile } from '../../types';
import { 
  MapIcon, 
  HexagonIcon, 
  PlusIcon, 
  MinusIcon, 
  CrystalIcon,
  LightningIcon,
  TargetIcon,
  GridIcon,
  EyeIcon,
  EyeOffIcon,
  ShoppingCartIcon
} from '../Icons';
import { MapView } from '../map/MapView';
import { HexGrid } from '../map/HexGrid';
import { getResolutionForZoom, getRadiusForZoom, calculateBulkPurchaseCost } from '../../utils/hexUtils';
import { useHexTiles } from '../../hooks/useHexTiles';
import { H3_RESOLUTIONS } from '../../types/hex';
import '../../styles/map.css';

interface OwnershipMapProps {
  player: Player | null;
  currency: Currency;
  setCurrency: (currency: Currency) => void;
  location: Location | null;
  setNotification: (message: string) => void;
}

export const OwnershipMap: React.FC<OwnershipMapProps> = ({
  player,
  currency,
  setCurrency,
  location,
  setNotification
}) => {
  const mapRef = useRef<maplibregl.Map | null>(null);
  const [selectedHexes, setSelectedHexes] = useState<Set<string>>(new Set());
  const [currentZoom, setCurrentZoom] = useState(12);
  const [mapCenter, setMapCenter] = useState({ lat: 55.7558, lng: 37.6173 }); // –ú–æ—Å–∫–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const [bulkPurchaseMode, setBulkPurchaseMode] = useState(false);
  const [totalPurchaseCost, setTotalPurchaseCost] = useState(0);
  const [showHexGrid, setShowHexGrid] = useState(true);
  const [isCompactMode, setIsCompactMode] = useState(false);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ö—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è hex-—Ç–∞–π–ª–∞–º–∏
  const { 
    hexTiles, 
    isLoading, 
    error: hexError, 
    updateHexOwnership, 
    updateMultipleHexOwnership, 
    refresh: refreshHexTiles 
  } = useHexTiles(location);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
  useEffect(() => {
    if (location) {
      setMapCenter({ lat: location.latitude, lng: location.longitude });
    }
  }, [location]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã
  const handleMapLoad = (map: maplibregl.Map) => {
    mapRef.current = map;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–∞—Ä—Ç—ã
    map.on('zoomend', () => {
      setCurrentZoom(map.getZoom());
    });
    
    map.on('moveend', () => {
      const center = map.getCenter();
      setMapCenter({ lat: center.lat, lng: center.lng });
    });
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –≥–µ–∫—Å—É
  const handleHexClick = (hexId: string, hexData: HexTile) => {
    if (bulkPurchaseMode) {
      // –í —Ä–µ–∂–∏–º–µ –º–∞—Å—Å–æ–≤–æ–π –ø–æ–∫—É–ø–∫–∏ –ø–æ–∫—É–ø–∞–µ–º –æ–±–ª–∞—Å—Ç—å 37 –≥–µ–∫—Å–æ–≤
      handleBulkPurchase(hexId);
    } else {
      // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –≤—ã–±–æ—Ä –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≥–µ–∫—Å–æ–≤
      const newSelection = new Set(selectedHexes);
      if (newSelection.has(hexId)) {
        newSelection.delete(hexId);
      } else {
        newSelection.add(hexId);
      }
      setSelectedHexes(newSelection);
    }
  };

  // –ú–∞—Å—Å–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞
  const handleBulkPurchase = async (centerHexId: string) => {
    const bulkPurchaseData = calculateBulkPurchaseCost(centerHexId, 3, hexTiles);
    const { totalCost, availableHexes } = bulkPurchaseData;
    
    if (currency.tokens < totalCost) {
      setNotification(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤. –ù—É–∂–Ω–æ: ${totalCost.toLocaleString()}`);
      return;
    }

    if (availableHexes.length === 0) {
      setNotification('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–µ–∫—Å–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏');
      return;
    }

    try {
      // –ü–æ–∫—É–ø–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–µ–∫—Å—ã
      await updateMultipleHexOwnership(availableHexes, 'owned');
      
      setCurrency({
        ...currency,
        tokens: currency.tokens - totalCost
      });
      
      setNotification(`–ö—É–ø–ª–µ–Ω–æ ${availableHexes.length} –≥–µ–∫—Å–æ–≤ –∑–∞ ${totalCost.toLocaleString()} —Ç–æ–∫–µ–Ω–æ–≤!`);
      setBulkPurchaseMode(false);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      refreshHexTiles();
    } catch (error) {
      setNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –≥–µ–∫—Å–æ–≤');
    }
  };

  // –ü–æ–∫—É–ø–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥–µ–∫—Å–æ–≤
  const handlePurchaseSelected = async () => {
    if (selectedHexes.size === 0) return;
    
    if (currency.tokens < totalPurchaseCost) {
      setNotification(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤. –ù—É–∂–Ω–æ: ${totalPurchaseCost.toLocaleString()}`);
      return;
    }

    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤–ª–∞–¥–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –≥–µ–∫—Å–∞–º–∏
      await updateMultipleHexOwnership(Array.from(selectedHexes), 'owned');
      
      // –°–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã
      setCurrency({
        ...currency,
        tokens: currency.tokens - totalPurchaseCost
      });
      
      setNotification(`–ö—É–ø–ª–µ–Ω–æ ${selectedHexes.size} –≥–µ–∫—Å–æ–≤ –∑–∞ ${totalPurchaseCost.toLocaleString()} —Ç–æ–∫–µ–Ω–æ–≤!`);
      setSelectedHexes(new Set());
    } catch (error) {
      setNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –≥–µ–∫—Å–æ–≤');
    }
  };

  // –û—á–∏—Å—Ç–∫–∞ –≤—ã–±–æ—Ä–∞
  const clearSelection = () => {
    setSelectedHexes(new Set());
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞
  useEffect(() => {
    const cost = selectedHexes.size * 1000; // 1000 —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ –≥–µ–∫—Å
    setTotalPurchaseCost(cost);
  }, [selectedHexes]);

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ—Ç–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
  const handleToggleHexGrid = () => {
    const newState = !showHexGrid;
    setShowHexGrid(newState);
    console.log('üåê –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ç–∫–∏:', newState ? '–ü–û–ö–ê–ó–ê–ù–û' : '–°–ö–†–´–¢–û');
  };

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–∫—Å–æ–≤
  const getHexStats = () => {
    const owned = hexTiles.filter(hex => hex.ownershipStatus === 'owned').length;
    const enemy = hexTiles.filter(hex => hex.ownershipStatus === 'enemy').length;
    const free = hexTiles.filter(hex => hex.ownershipStatus === 'free').length;
    return { owned, enemy, free, total: hexTiles.length };
  };

  return (
    <div className="h-full w-full relative bg-dark-primary overflow-hidden">
      {/* –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–û */}
      <div className="absolute inset-0" style={{ width: '100%', height: '100%' }}>
        <MapView
          center={mapCenter}
          zoom={currentZoom}
          location={location}
          onMapLoad={handleMapLoad}
          showHexGrid={showHexGrid}
        >
          {mapRef.current && showHexGrid && (
            <HexGrid
              map={mapRef.current}
              center={mapCenter}
              resolution={getResolutionForZoom(currentZoom)}
              onHexClick={handleHexClick}
              selectedHexes={selectedHexes}
            />
          )}
        </MapView>
      </div>

      {/* –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è - –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è */}
      <div className="absolute top-4 left-4 right-4 z-40">
        <div className="glass-panel bg-dark-primary/85 backdrop-blur-xl border border-accent-primary/40 rounded-2xl p-3 shadow-neon">
          <div className="flex items-center justify-between">
            {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <div className="flex items-center space-x-2">
              <HexagonIcon className="w-5 h-5 text-accent-primary" />
              <h2 className="text-lg font-bold text-text-primary">–ö–∞—Ä—Ç–∞ –≤–ª–∞–¥–µ–Ω–∏–π</h2>
              <div className="text-xs text-text-secondary">
                {currentZoom.toFixed(1)}x
              </div>
            </div>

            {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
            <div className="flex items-center space-x-2">
              {/* –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ç–∫–∏ - –£–õ–£–ß–®–ï–ù–ù–ê–Ø */}
              <button
                className={`px-3 py-2 rounded-lg transition-all duration-300 border text-sm font-semibold min-w-[80px] ${
                  showHexGrid 
                    ? 'bg-accent-primary/20 border-accent-primary text-accent-primary shadow-[0_0_12px_rgba(0,212,255,0.4)] scale-105' 
                    : 'bg-dark-secondary/60 border-accent-primary/30 text-text-secondary hover:border-accent-primary hover:text-accent-primary hover:bg-accent-primary/10'
                }`}
                onClick={() => {
                  handleToggleHexGrid();
                  setNotification(showHexGrid ? 'üõë –°–µ—Ç–∫–∞ —Å–∫—Ä—ã—Ç–∞' : 'üåê –°–µ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∞');
                }}
                title={showHexGrid ? '–°–∫—Ä—ã—Ç—å –≥–µ–∫—Å–∞–≥–æ–Ω–∞–ª—å–Ω—É—é —Å–µ—Ç–∫—É' : '–ü–æ–∫–∞–∑–∞—Ç—å –≥–µ–∫—Å–∞–≥–æ–Ω–∞–ª—å–Ω—É—é —Å–µ—Ç–∫—É'}
              >
                <div className="flex items-center space-x-1">
                  <span className="text-lg">{showHexGrid ? 'üõë' : 'üåê'}</span>
                  <span>{showHexGrid ? 'OFF' : 'ON'}</span>
                </div>
              </button>

              {/* –ö–Ω–æ–ø–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –ø–æ–∫—É–ø–∫–∏ */}
              <button
                className={`p-2 rounded-lg transition-all duration-300 border ${
                  bulkPurchaseMode 
                    ? 'bg-accent-secondary/20 border-accent-secondary text-accent-secondary shadow-[0_0_12px_rgba(168,85,247,0.4)]' 
                    : 'bg-dark-secondary/60 border-accent-secondary/30 text-text-secondary hover:border-accent-secondary hover:text-accent-secondary'
                }`}
                onClick={() => setBulkPurchaseMode(!bulkPurchaseMode)}
                title={bulkPurchaseMode ? '–û—Ç–∫–ª—é—á–∏—Ç—å –º–∞—Å—Å–æ–≤—É—é –ø–æ–∫—É–ø–∫—É' : '–ú–∞—Å—Å–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ (37 –≥–µ–∫—Å–æ–≤)'}
              >
                <ShoppingCartIcon className="w-4 h-4" />
              </button>

              {/* –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ */}
              {selectedHexes.size > 0 && (
                <button 
                  className="p-2 rounded-lg transition-all duration-300 border bg-red-600/20 border-red-500/30 text-red-400 hover:border-red-500 hover:shadow-[0_0_12px_rgba(239,68,68,0.4)]" 
                  onClick={clearSelection}
                  title={`–û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä (${selectedHexes.size})`}
                >
                  <span className="text-xs font-bold">{selectedHexes.size}</span>
                </button>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±–æ—Ä–µ - –ø–ª–∞–≤–∞—é—â–∞—è –ø–∞–Ω–µ–ª—å —Å–Ω–∏–∑—É */}
      {selectedHexes.size > 0 && (
        <div className="absolute bottom-24 left-4 right-4 z-40">
          <div className="glass-panel bg-dark-primary/90 backdrop-blur-xl border border-accent-primary/40 rounded-2xl p-4 shadow-neon">
            <div className="flex justify-between items-center">
              <div>
                <p className="text-sm text-text-secondary mb-1">
                  –í—ã–±—Ä–∞–Ω–æ —Ç–∞–π–ª–æ–≤: <span className="text-accent-primary font-bold">{selectedHexes.size}</span>
                </p>
                <p className="font-mono text-lg text-text-primary">
                  –°—Ç–æ–∏–º–æ—Å—Ç—å: <span className="text-yellow-400 font-bold">{totalPurchaseCost.toLocaleString()}</span> —Ç–æ–∫–µ–Ω–æ–≤
                </p>
              </div>
              
              <button
                className={`px-6 py-3 rounded-xl border transition-all duration-300 font-medium flex items-center space-x-2 ${
                  currency.tokens >= totalPurchaseCost
                    ? 'bg-green-600/20 border-green-500/40 text-green-400 hover:bg-green-600/30 hover:shadow-[0_0_20px_rgba(34,197,94,0.4)]'
                    : 'bg-red-600/20 border-red-500/40 text-red-400 cursor-not-allowed'
                }`}
                onClick={handlePurchaseSelected}
                disabled={currency.tokens < totalPurchaseCost}
              >
                <CrystalIcon className="w-5 h-5" />
                <span>–ö—É–ø–∏—Ç—å</span>
              </button>
            </div>
          </div>
        </div>
      )}

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–µ–∂–∏–º–∞ –º–∞—Å—Å–æ–≤–æ–π –ø–æ–∫—É–ø–∫–∏ */}
      {bulkPurchaseMode && (
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-50 pointer-events-none">
          <div className="glass-panel bg-accent-secondary/90 backdrop-blur-xl border border-accent-secondary rounded-2xl px-6 py-4 shadow-[0_0_30px_rgba(168,85,247,0.6)]">
            <div className="text-dark-primary text-center font-bold">
              <TargetIcon className="w-8 h-8 mx-auto mb-2 animate-pulse" />
              <p className="text-lg">–ú–∞—Å—Å–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞</p>
              <p className="text-sm opacity-80">–ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É –æ–±–ª–∞—Å—Ç–∏</p>
            </div>
          </div>
        </div>
      )}

      {/* –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –ª–µ–≥–µ–Ω–¥–∞ –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É */}
      <div className="absolute bottom-24 right-4 z-40">
        <div className="glass-panel bg-dark-primary/80 backdrop-blur-xl border border-accent-primary/30 rounded-xl p-3 shadow-neon">
          <h4 className="text-xs font-bold mb-2 text-accent-primary">–õ–µ–≥–µ–Ω–¥–∞</h4>
          <div className="space-y-1 text-xs">
            <div className="flex items-center space-x-2">
              <div className="w-3 h-3 border border-green-500/60 bg-green-500/30 rounded"></div>
              <span className="text-text-secondary">–ú–æ–∏ ({getHexStats().owned})</span>
            </div>
            <div className="flex items-center space-x-2">
              <div className="w-3 h-3 border border-red-500/60 bg-red-500/30 rounded"></div>
              <span className="text-text-secondary">–ß—É–∂–∏–µ ({getHexStats().enemy})</span>
            </div>
            <div className="flex items-center space-x-2">
              <div className="w-3 h-3 border border-gray-500/60 bg-gray-500/30 rounded"></div>
              <span className="text-text-secondary">–°–≤–æ–±–æ–¥–Ω—ã–µ ({getHexStats().free})</span>
            </div>
          </div>
        </div>
      </div>

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
      {isLoading && (
        <div className="absolute top-20 left-1/2 transform -translate-x-1/2 z-50">
          <div className="glass-panel bg-dark-primary/90 backdrop-blur-xl border border-accent-primary/40 rounded-xl px-4 py-2 shadow-neon">
            <div className="flex items-center space-x-2 text-accent-primary">
              <div className="w-4 h-4 border-2 border-accent-primary/30 border-t-accent-primary rounded-full animate-spin"></div>
              <span className="text-sm font-medium">–ó–∞–≥—Ä—É–∑–∫–∞ –≥–µ–∫—Å–æ–≤...</span>
            </div>
          </div>
        </div>
      )}

      {/* –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ */}
      {hexError && (
        <div className="absolute top-20 left-1/2 transform -translate-x-1/2 z-50">
          <div className="glass-panel bg-red-600/90 backdrop-blur-xl border border-red-500/40 rounded-xl px-4 py-2 shadow-[0_0_20px_rgba(239,68,68,0.4)]">
            <span className="text-sm font-medium text-white">–û—à–∏–±–∫–∞: {hexError}</span>
          </div>
        </div>
      )}
    </div>
  );
};

export default OwnershipMap;
